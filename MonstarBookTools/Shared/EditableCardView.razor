@using Models

<div class="card" style="max-width:14rem; min-width:14rem;">
    <div class="card-header text-center">
        <div>
            Rank
            <select class="small" @onchange="OnRankChanged">
                @foreach (var rank in CardService.CardDatas.Select(cd => cd.Rank).Distinct())
                {
                    <option value="@rank" selected="@(rank == selectedRank)">@rank</option>
                }
            </select>
        </div>
        <div>
            <select class="small" @onchange="OnCardChanged">
                <option value="--">--</option>
                @foreach (var card in CardService.CardDatas.Where(cd => cd.Rank == selectedRank))
                {
                    <option value="@card.Name" selected="@(card.Name == Card?.Name)">@card.Name</option>
                }
            </select>
        </div>
        <div>
            <select class="small" @onchange="OnRareChanged">
                <option value="@Rare.Bronze">@Rare.Bronze</option>
                <option value="@Rare.Silver">@Rare.Silver</option>
                <option value="@Rare.Gold">@Rare.Gold</option>
            </select>
        </div>
    </div>
    @if (Card != null)
    {
        <div class="card-body text-center m-0 p-0">
            <img src="@($"/card-images/{Card.ImgSrc}")" class="card-img d-none d-xl-inline" style="width:106px" />
        </div>
    }
    <div class="card-body" @onclick="() => modal?.Open(CardService.SkillDatas, Card?.Skills ?? Array.Empty<Skill>(), SetSelectedSkills)">
        @for (int i = 0; i < selectedRare.MaxSkillCount; i++)
        {
            <div class="border">
                @(Card?.Skills.ElementAtOrDefault(i)?.ToString() ?? "　")
            </div>
        }
    </div>
</div>

<SkillSelectModal @ref="modal" />

@code{
    private SkillSelectModal? modal;
    private string selectedRank = "1";
    private Rare selectedRare = Rare.Bronze;

    [Parameter]
    public Card? Card { get; set; }

    [Parameter]
    public EventCallback<Card?> CardChanged { get; set; }

    private async Task SetSelectedSkills(IEnumerable<Skill> skills)
    {
        if (Card != null)
        {
            Card = Card with { Skills = skills.Take(Card.Rare.MaxSkillCount).ToArray() };
        }
        await CardChanged.InvokeAsync(Card);
        StateHasChanged();
    }

    private async Task OnRankChanged(ChangeEventArgs e)
    {
        selectedRank = $"{  e.Value}";
        if (CardService.CardDatas.FirstOrDefault(cd => cd.Rank == selectedRank) is CardData cd)
        {
            Card = new Card(cd) { Rare = selectedRare, Skills = cd.Skills.Take(selectedRare.MaxSkillCount).ToArray() };
        }
        await CardChanged.InvokeAsync(Card);
    }

    private async Task OnCardChanged(ChangeEventArgs e)
    {
        if (CardService.GetCardData(e.Value?.ToString()) is CardData cd)
        {
            Card = new Card(cd) { Rare = selectedRare, Skills = cd.Skills.Take(selectedRare.MaxSkillCount).ToArray() };
        }
        else
        {
            Card = null;
        }
        await CardChanged.InvokeAsync(Card);
    }

    private async Task OnRareChanged(ChangeEventArgs e)
    {
        selectedRare = new[] { Rare.Bronze, Rare.Silver, Rare.Gold }.FirstOrDefault(r => r.Name == e.Value?.ToString()) ?? Rare.Bronze;
        if (Card != null && CardService.GetCardData(Card.Name) is CardData cd)
        {
            Card = Card with { Rare = selectedRare, Skills = cd.Skills.Take(selectedRare.MaxSkillCount).ToArray() };
            await CardChanged.InvokeAsync(Card);
        }
    }
}
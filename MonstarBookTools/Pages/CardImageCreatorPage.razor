@page "/cardimage"

@using Blazor.Extensions.Canvas
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using MonstarBookTools.Models
@using System.Drawing

@inject IJSRuntime JSRuntime

<h3>オリジナルカード画像作成</h3>

<div class="container-fluid">
    <div class="row">
        <div class="col-auto">
            <BECanvas Width="243" Height="328" @ref="_canvasReference"></BECanvas>
        </div>
        <div class="col">
            <div class="row">
                <div class="col-auto">
                    Rare:<CustomSelect TItem="Rare" ItemsSource="Rare.Rares" @bind-SelectedItem="model.Rare" class="custom-select-sm" />
                </div>
                <div class="col-auto">
                    Rank:<input type="number" min="1" max="11" class="form-control-sm" @bind-value="@model.Rank" @bind-value:event="oninput" />
                </div>
                <div class="col-auto">
                    Name:<input type="text" class="form-control-sm" @bind-value="@model.Name" @bind-value:event="oninput" />
                </div>
            </div>
            <div class="row">
                <div class="col-auto border border-secondary px-0 mx-1">
                    <div class="text-center bg-light">
                        Status
                    </div>
                    <div class="d-table mx-2">
                        @foreach (var (key, value) in model.Statuses)
                        {
                            <div class="d-table-row">
                                <div class="d-table-cell">@key.Name</div>
                                <div class="d-table-cell">
                                    <input type="number" min="0" max="50" class="form-control-sm" @bind-value="@model.Statuses[key].Value" @bind-value:event="oninput" />
                                    <CustomSelect TItem="string" ItemsSource="StatusGrowRank.Ranks.Select(gr => gr.Name).ToArray()" @bind-SelectedItem="model.Statuses[key].Grow" />
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="col-auto border border-secondary px-0 mx-1">
                    <div class="text-center bg-light">
                        Skill
                    </div>
                    @for (int i = 0; i < model.Rare.MaxSkillCount; i++)
                    {
                        var index = i;
                        <div class="row form-check mx-2">
                            <input type="checkbox" class="form-check-input" @bind-value="@model.Skills[index].Enabled" />
                            <input type="text" class="form-control-sm" @bind-value="@model.Skills[index].Name" @bind-value:event="oninput" />
                            <CustomSelect TItem="int" ItemsSource="new[] { 5, 4, 3, 2, 1, 0, -1, -2, -3, -4 }" @bind-SelectedItem="model.Skills[index].Lv" />
                        </div>
                    }
                </div>
                <div class="col-auto border border-secondary px-0 mx-1">
                    <div class="text-center bg-light">
                        Image
                    </div>
                    <div class="row mx-2">
                        Image:<InputFile OnChange="LoadFiles"></InputFile>
                    </div>
                    <div class="row mx-2">
                        X:<input type="range" value="@(imgLocation?.X ?? 15)" min="@(imgLocation?.MinX ?? 15)" max="227" @oninput="ChangeXAsync" />
                    </div>
                    <div class="row mx-2">
                        Y:<input type="range" value="@(imgLocation?.Y ?? 48)" min="@(imgLocation?.MinY ?? 48)" max="121" @oninput="ChangeYAsync" />
                    </div>
                    <div class="row mx-2">
                        Scale:<input type="range" value="@(imgLocation?.Zoomx100 ?? 100)" min="10" max="200" @oninput="ChangeScaleAsync" />
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div>
        <button @onclick="OnClickDownloadButton">Save</button>
    </div>
    <div class="mt-2">
        読み込み画像:<br />
        <img @ref="charaReference" id="chara" src="@charaImgBase64" @onload="ChangeImageAsync" />
        <img @ref="bronzeCardReference" hidden src="images/bronzecardframe.png" />
        <img @ref="silverCardReference" hidden src="images/silvercardframe.png" />
        <img @ref="goldCardReference" hidden src="images/goldcardframe.png" />
    </div>
</div>

@code {
    private class Model
    {
        public class Status
        {
            public Status() : this(0, "F") { }
            public Status(int value, string grow)
            {
                Value = value;
                Grow = grow;
            }
            public int Value { get; set; }
            public string Grow { get; set; }
        }
        public class Skill
        {
            public Skill() : this("", 5, false) { }
            public Skill(string name, int lv, bool enabled)
            {
                Name = name;
                Lv = lv;
                Enabled = enabled;
            }

            public string Name { get; set; }
            public int Lv { get; set; }
            public bool Enabled { get; set; }
        }

        public Rare Rare { get; set; } = Rare.Bronze;
        public int Rank { get; set; } = 1;
        public string Name { get; set; } = "";
        public Dictionary<StatusType, Status> Statuses { get; set; } = StatusType.Statuses.ToDictionary(s => s, _ => new Status(0, "F"));
        public Skill[] Skills { get; set; } = Enumerable.Range(1, 8).Select(_ => new Skill()).ToArray();
    }

    private class ImgLocation
    {
        public ImgLocation(int naturalWidth, int naturalHeight)
        {
            NaturalSize = new Size(naturalWidth, naturalHeight);
            Zoom = Math.Max((float)CanvasRect.Width / NaturalSize.Width, (float)CanvasRect.Height / NaturalSize.Height);
            X = (int)(CenterPos.X - Size.Width / 2);
            Y = (int)(CenterPos.Y - Size.Height / 2);
        }
        public static readonly Rectangle CanvasRect = new Rectangle(15, 48, (227 - 15), (121 - 48));
        public static readonly Point CenterPos = new Point((227 - 15) / 2 + 15, (121 - 48) / 2 + 48);

        public Size NaturalSize { get; }

        public float Zoom { get; set; }
        public int Zoomx100
        {
            get => (int)(Zoom * 100);
            set => Zoom = value * 0.01f;
        }

        public SizeF Size => new SizeF(NaturalSize.Width * Zoom, NaturalSize.Height * Zoom);

        public int X { get; set; }
        public int Y { get; set; }

        public int MinX => (int)(CanvasRect.X - Size.Width);
        public int MinY => (int)(CanvasRect.Y - Size.Height);
    }

    private Model model = new Model();
    private ImgLocation? imgLocation;

    private IJSObjectReference? module;

    private Canvas2DContext? _context;
    private BECanvasComponent? _canvasReference;

    private ElementReference bronzeCardReference;
    private ElementReference silverCardReference;
    private ElementReference goldCardReference;
    private ElementReference charaReference;

    private string? charaImgBase64;

    protected override async Task OnInitializedAsync()
    {
        module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./helper.js");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _context = await _canvasReference.CreateCanvas2DAsync();
        }
        await FillTextAsync();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var bf = await e.File.RequestImageFileAsync(e.File.ContentType, 800, 600);
        var b = new byte[bf.Size];
        var f = await bf.OpenReadStream().ReadAsync(b);
        charaImgBase64 = $"data:{bf.ContentType};base64,{Convert.ToBase64String(b)}";

        //var b = new byte[e.File.Size];
        //var f = await e.File.OpenReadStream().ReadAsync(b);
        //charaImgBase64 = $"data:{e.File.ContentType};base64,{Convert.ToBase64String(b)}";
    }

    private async Task ChangeImageAsync(EventArgs e)
    {
        if (module != null)
        {
            var sizeArr = (await module.InvokeAsync<string>("getElementSize", "chara")).Split(',').Select(s => int.Parse(s)).ToArray();
            imgLocation = new ImgLocation(sizeArr[0], sizeArr[1]);
        }
    }

    private void ChangeXAsync(ChangeEventArgs e)
    {
        if (imgLocation != null)
        {
            imgLocation.X = int.Parse($"{e.Value}");
        }
    }

    private void ChangeYAsync(ChangeEventArgs e)
    {
        if (imgLocation != null)
        {
            imgLocation.Y = int.Parse($"{e.Value}");
        }
    }

    private void ChangeScaleAsync(ChangeEventArgs e)
    {
        if (imgLocation != null)
        {
            imgLocation.Zoomx100 = int.Parse($"{e.Value}");

            imgLocation.X = (int)(ImgLocation.CenterPos.X - imgLocation.Size.Width / 2);
            imgLocation.Y = (int)(ImgLocation.CenterPos.Y - imgLocation.Size.Height / 2);
        }
    }

    private async Task FillTextAsync()
    {
        if (_context != null)
        {
            //初期化
            await _context.SetFillStyleAsync(System.Drawing.Color.White.Name);
            await _context.FillRectAsync(ImgLocation.CanvasRect.X, ImgLocation.CanvasRect.Y, ImgLocation.CanvasRect.Width, ImgLocation.CanvasRect.Height);

            //キャラ画像
            if (imgLocation != null)
            {
                await _context.DrawImageAsync(charaReference, imgLocation.X, imgLocation.Y, imgLocation.Size.Width, imgLocation.Size.Height);
            }

            //カード背景
            if (model.Rare == Rare.Gold)
                await _context.DrawImageAsync(goldCardReference, 0, 0, 243, 328);
            else if (model.Rare == Rare.Silver)
                await _context.DrawImageAsync(silverCardReference, 0, 0, 243, 328);
            else
                await _context.DrawImageAsync(bronzeCardReference, 0, 0, 243, 328);

            //Rank
            await _context.SetFillStyleAsync(System.Drawing.Color.White.Name);
            await _context.SetFontAsync("bold 9pt 'ＭＳ ゴシック'");
            var rankStr = $"Rank {model.Rank}";
            var rankWidth = (await _context.MeasureTextAsync(rankStr)).Width;
            await _context.FillTextAsync(rankStr, 122 - rankWidth / 2, 27);

            //Name
            if (model.Rare == Rare.Gold)
                await _context.SetFillStyleAsync("#FFFF00");
            else if (model.Rare == Rare.Silver)
                await _context.SetFillStyleAsync("#FFFFFF");
            else
                await _context.SetFillStyleAsync("#EFBE63");

            await _context.SetFontAsync("9pt 'ＭＳ ゴシック'");
            var nameWidth = (await _context.MeasureTextAsync(model.Name)).Width;
            await _context.FillTextAsync(model.Name, 123 - nameWidth / 2, 43);

            //Status
            for (int i = 0; i < 7; i++)
            {
                var st = model.Statuses[StatusType.Statuses[i]];

                await _context.SetFillStyleAsync(System.Drawing.Color.White.Name);
                await _context.FillTextAsync($"{st.Value}", 63 + (i / 4) * 111, 170 + (i % 4) * 17);


                await _context.SetFillStyleAsync(System.Drawing.Color.Yellow.Name);
                await _context.FillTextAsync($"{st.Grow}", 90 + (i / 4) * 111, 170 + (i % 4) * 17);
            }

            //Skill
            await _context.SetFillStyleAsync(System.Drawing.Color.White.Name);
            for (int i = 0; i < model.Rare.MaxSkillCount; i++)
            {
                var sk = model.Skills[i];
                if (sk.Enabled)
                {
                    await _context.FillTextAsync($"{sk.Lv:+#;-#}", 31 + (i % 2) * 107, 257 + (i / 2) * 17);
                    await _context.FillTextAsync($"{sk.Name}", 49 + (i % 2) * 107, 257 + (i / 2) * 17);
                }
            }
        }
    }

    private async Task OnClickDownloadButton()
    {
        if (module != null && _canvasReference != null)
        {
            await module.InvokeVoidAsync("saveCanvas", _canvasReference.CanvasReference);
        }
    }
}
